<?php
/**
 * Resultat
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GAEL API
 *
 * Ceci est l'API des web services exposés par le système informatique GAEL (Gestion Administrative En Ligne) pour France Éducation international.  Cette API offre les services suivants   * inscrire un ou plusieurs candidats à un examen  * importer dans GAEL les résultats d'un ou plusieurs candidats à un même examen
 *
 * The version of the OpenAPI document: 1.8.1
 * Contact: gael-api@france-education-international.fr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fei\Gael\Model;

use \ArrayAccess;
use \Fei\Gael\ObjectSerializer;

/**
 * Resultat Class Doc Comment
 *
 * @category Class
 * @description Note (ou absence ou dispense) pour 1 épreuve d&#39;1 examen. GAEL vérifie la cohérence des données soumises. Les notes vont de 0.5 en 0.5 points entre 0 et 25 inclus, sauf pour le C2 qui va jusqu&#39;à 50.
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Resultat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Resultat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'typeResultat' => '\Fei\Gael\Model\EpreuveType',
        'note' => 'float',
        'statut' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'typeResultat' => null,
        'note' => null,
        'statut' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'typeResultat' => 'typeResultat',
        'note' => 'note',
        'statut' => 'statut'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'typeResultat' => 'setTypeResultat',
        'note' => 'setNote',
        'statut' => 'setStatut'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'typeResultat' => 'getTypeResultat',
        'note' => 'getNote',
        'statut' => 'getStatut'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUT_PRE = 'PRE';
    const STATUT_ABS = 'ABS';
    const STATUT_DIS = 'DIS';
    const STATUT_ELI = 'ELI';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatutAllowableValues()
    {
        return [
            self::STATUT_PRE,
            self::STATUT_ABS,
            self::STATUT_DIS,
            self::STATUT_ELI,
            '', // 20220523 workaround error caused by invalid values from API
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['typeResultat'] = $data['typeResultat'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['statut'] = $data['statut'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['typeResultat'] === null) {
            $invalidProperties[] = "'typeResultat' can't be null";
        }
        if (!is_null($this->container['note']) && ($this->container['note'] > 50)) {
            $invalidProperties[] = "invalid value for 'note', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['note']) && ($this->container['note'] < 0)) {
            $invalidProperties[] = "invalid value for 'note', must be bigger than or equal to 0.";
        }

        if ($this->container['statut'] === null) {
            $invalidProperties[] = "'statut' can't be null";
        }
        $allowedValues = $this->getStatutAllowableValues();
        if (!is_null($this->container['statut']) && !in_array($this->container['statut'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'statut', must be one of '%s'",
                $this->container['statut'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets typeResultat
     *
     * @return \Fei\Gael\Model\EpreuveType
     */
    public function getTypeResultat()
    {
        return $this->container['typeResultat'];
    }

    /**
     * Sets typeResultat
     *
     * @param \Fei\Gael\Model\EpreuveType $typeResultat typeResultat
     *
     * @return self
     */
    public function setTypeResultat($typeResultat)
    {
        $this->container['typeResultat'] = $typeResultat;

        return $this;
    }

    /**
     * Gets note
     *
     * @return float|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param float|null $note Note pour ce type, note sur 25, sur 50 pour le C2
     *
     * @return self
     */
    public function setNote($note)
    {

        if (!is_null($note) && ($note > 50)) {
            throw new \InvalidArgumentException('invalid value for $note when calling Resultat., must be smaller than or equal to 50.');
        }
        if (!is_null($note) && ($note < 0)) {
            throw new \InvalidArgumentException('invalid value for $note when calling Resultat., must be bigger than or equal to 0.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets statut
     *
     * @return string
     */
    public function getStatut()
    {
        return $this->container['statut'];
    }

    /**
     * Sets statut
     *
     * @param string $statut statut du candidat à l'épreuve * `PRE` - présent * `ABS` - absent * `DIS` - dispensé * `ELI` - éliminé
     *
     * @return self
     */
    public function setStatut($statut)
    {
        $allowedValues = $this->getStatutAllowableValues();
        if (!in_array($statut, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'statut', must be one of '%s'",
                    $statut,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['statut'] = $statut;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


