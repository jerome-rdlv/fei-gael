<?php
/**
 * Inscriptions
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GAEL API
 *
 * Ceci est l'API des web services exposés par le système informatique GAEL (Gestion Administrative En Ligne) pour France Éducation international.  Cette API offre les services suivants   * inscrire un ou plusieurs candidats à un examen  * importer dans GAEL les résultats d'un ou plusieurs candidats à un même examen
 *
 * The version of the OpenAPI document: 1.8.1
 * Contact: gael-api@france-education-international.fr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fei\Gael\Model;

use \ArrayAccess;
use \Fei\Gael\ObjectSerializer;

/**
 * Inscriptions Class Doc Comment
 *
 * @category Class
 * @description Un unique examen, un unique centre, et la liste de candidats associée avec leurs détails d&#39;inscription. GAEL vérifiera que l&#39;examen existe bien et que le centre est bien positionné dessus.
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Inscriptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Inscriptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'session' => 'string',
        'niveau' => '\Fei\Gael\Model\NiveauExamen',
        'codeCentre' => 'string',
        'candidats' => '\Fei\Gael\Model\CandidatInscription[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'session' => null,
        'niveau' => null,
        'codeCentre' => null,
        'candidats' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'session' => 'session',
        'niveau' => 'niveau',
        'codeCentre' => 'codeCentre',
        'candidats' => 'candidats'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'session' => 'setSession',
        'niveau' => 'setNiveau',
        'codeCentre' => 'setCodeCentre',
        'candidats' => 'setCandidats'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'session' => 'getSession',
        'niveau' => 'getNiveau',
        'codeCentre' => 'getCodeCentre',
        'candidats' => 'getCandidats'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['session'] = $data['session'] ?? null;
        $this->container['niveau'] = $data['niveau'] ?? null;
        $this->container['codeCentre'] = $data['codeCentre'] ?? null;
        $this->container['candidats'] = $data['candidats'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['session'] === null) {
            $invalidProperties[] = "'session' can't be null";
        }
        if ($this->container['niveau'] === null) {
            $invalidProperties[] = "'niveau' can't be null";
        }
        if ($this->container['codeCentre'] === null) {
            $invalidProperties[] = "'codeCentre' can't be null";
        }
        if ($this->container['candidats'] === null) {
            $invalidProperties[] = "'candidats' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets session
     *
     * @return string
     */
    public function getSession()
    {
        return $this->container['session'];
    }

    /**
     * Sets session
     *
     * @param string $session un code session FEI qui permet d'identifier la session. Il est composé de l'année sur 4 chiffres suivi du mois sur 2 chiffres et du code déclinaison.
     *
     * @return self
     */
    public function setSession($session)
    {
        $this->container['session'] = $session;

        return $this;
    }

    /**
     * Gets niveau
     *
     * @return \Fei\Gael\Model\NiveauExamen
     */
    public function getNiveau()
    {
        return $this->container['niveau'];
    }

    /**
     * Sets niveau
     *
     * @param \Fei\Gael\Model\NiveauExamen $niveau niveau
     *
     * @return self
     */
    public function setNiveau($niveau)
    {
        $this->container['niveau'] = $niveau;

        return $this;
    }

    /**
     * Gets codeCentre
     *
     * @return string
     */
    public function getCodeCentre()
    {
        return $this->container['codeCentre'];
    }

    /**
     * Sets codeCentre
     *
     * @param string $codeCentre code centre / numéro d'établissement / numéro de centre, sur 6 chiffres, les 3 premiers encodant le territoire, les 3 suivants le centre.
     *
     * @return self
     */
    public function setCodeCentre($codeCentre)
    {
        $this->container['codeCentre'] = $codeCentre;

        return $this;
    }

    /**
     * Gets candidats
     *
     * @return \Fei\Gael\Model\CandidatInscription[]
     */
    public function getCandidats()
    {
        return $this->container['candidats'];
    }

    /**
     * Sets candidats
     *
     * @param \Fei\Gael\Model\CandidatInscription[] $candidats candidats
     *
     * @return self
     */
    public function setCandidats($candidats)
    {
        $this->container['candidats'] = $candidats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


