<?php
/**
 * CandidatCree
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GAEL API
 *
 * Ceci est l'API des web services exposés par le système informatique GAEL (Gestion Administrative En Ligne) pour France Éducation international.  Cette API offre les services suivants   * inscrire un ou plusieurs candidats à un examen  * importer dans GAEL les résultats d'un ou plusieurs candidats à un même examen
 *
 * The version of the OpenAPI document: 1.8.1
 * Contact: gael-api@france-education-international.fr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fei\Gael\Model;

use \ArrayAccess;
use \Fei\Gael\ObjectSerializer;

/**
 * CandidatCree Class Doc Comment
 *
 * @category Class
 * @description Le candidat nouvellement créé dans GAEL renvoyé suite à un appel POST à /examen/addCandidats. Contient le numéro unique plus les informations nécessaires pour identifier de façon unique un candidat. Si il n&#39;y a pas de numéro de candidat, c&#39;est que GAEL a détecté un doublon pour le nom, prénom et date/année de naissance renseignés. Le flag isDoublon est alors à true.
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CandidatCree implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CandidatCree';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'isDoublon' => 'bool',
        'numeroCandidat' => 'string',
        'nom' => 'string',
        'prenom' => 'string',
        'dateNaissance' => '\DateTime',
        'anneeNaissance' => 'int',
        'anneeNaissanceInconnue' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'isDoublon' => null,
        'numeroCandidat' => null,
        'nom' => null,
        'prenom' => null,
        'dateNaissance' => 'date',
        'anneeNaissance' => null,
        'anneeNaissanceInconnue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'isDoublon' => 'isDoublon',
        'numeroCandidat' => 'numeroCandidat',
        'nom' => 'nom',
        'prenom' => 'prenom',
        'dateNaissance' => 'dateNaissance',
        'anneeNaissance' => 'anneeNaissance',
        'anneeNaissanceInconnue' => 'anneeNaissanceInconnue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'isDoublon' => 'setIsDoublon',
        'numeroCandidat' => 'setNumeroCandidat',
        'nom' => 'setNom',
        'prenom' => 'setPrenom',
        'dateNaissance' => 'setDateNaissance',
        'anneeNaissance' => 'setAnneeNaissance',
        'anneeNaissanceInconnue' => 'setAnneeNaissanceInconnue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'isDoublon' => 'getIsDoublon',
        'numeroCandidat' => 'getNumeroCandidat',
        'nom' => 'getNom',
        'prenom' => 'getPrenom',
        'dateNaissance' => 'getDateNaissance',
        'anneeNaissance' => 'getAnneeNaissance',
        'anneeNaissanceInconnue' => 'getAnneeNaissanceInconnue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['isDoublon'] = $data['isDoublon'] ?? null;
        $this->container['numeroCandidat'] = $data['numeroCandidat'] ?? null;
        $this->container['nom'] = $data['nom'] ?? null;
        $this->container['prenom'] = $data['prenom'] ?? null;
        $this->container['dateNaissance'] = $data['dateNaissance'] ?? null;
        $this->container['anneeNaissance'] = $data['anneeNaissance'] ?? null;
        $this->container['anneeNaissanceInconnue'] = $data['anneeNaissanceInconnue'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isDoublon
     *
     * @return bool|null
     */
    public function getIsDoublon()
    {
        return $this->container['isDoublon'];
    }

    /**
     * Sets isDoublon
     *
     * @param bool|null $isDoublon True si GAEL a déjà un candidat avec le même nom, prénom et date/année de naissance, false si le candidat a été créé. Si à TRUE, le candidat n'a pas été enregistré dans GAEL et le champs numeroCandidat de la réponse est nul.
     *
     * @return self
     */
    public function setIsDoublon($isDoublon)
    {
        $this->container['isDoublon'] = $isDoublon;

        return $this;
    }

    /**
     * Gets numeroCandidat
     *
     * @return string|null
     */
    public function getNumeroCandidat()
    {
        return $this->container['numeroCandidat'];
    }

    /**
     * Sets numeroCandidat
     *
     * @param string|null $numeroCandidat Numéro du candidat dans GAEL, unique.
     *
     * @return self
     */
    public function setNumeroCandidat($numeroCandidat)
    {
        $this->container['numeroCandidat'] = $numeroCandidat;

        return $this;
    }

    /**
     * Gets nom
     *
     * @return string|null
     */
    public function getNom()
    {
        return $this->container['nom'];
    }

    /**
     * Sets nom
     *
     * @param string|null $nom Nom de famille du candidat
     *
     * @return self
     */
    public function setNom($nom)
    {
        $this->container['nom'] = $nom;

        return $this;
    }

    /**
     * Gets prenom
     *
     * @return string|null
     */
    public function getPrenom()
    {
        return $this->container['prenom'];
    }

    /**
     * Sets prenom
     *
     * @param string|null $prenom Prénom du candidat
     *
     * @return self
     */
    public function setPrenom($prenom)
    {
        $this->container['prenom'] = $prenom;

        return $this;
    }

    /**
     * Gets dateNaissance
     *
     * @return \DateTime|null
     */
    public function getDateNaissance()
    {
        return $this->container['dateNaissance'];
    }

    /**
     * Sets dateNaissance
     *
     * @param \DateTime|null $dateNaissance date de naissance du candidat
     *
     * @return self
     */
    public function setDateNaissance($dateNaissance)
    {
        $this->container['dateNaissance'] = $dateNaissance;

        return $this;
    }

    /**
     * Gets anneeNaissance
     *
     * @return int|null
     */
    public function getAnneeNaissance()
    {
        return $this->container['anneeNaissance'];
    }

    /**
     * Sets anneeNaissance
     *
     * @param int|null $anneeNaissance l'année de naissance du candidat si sa date de naissance n'est pas connue
     *
     * @return self
     */
    public function setAnneeNaissance($anneeNaissance)
    {
        $this->container['anneeNaissance'] = $anneeNaissance;

        return $this;
    }

    /**
     * Gets anneeNaissanceInconnue
     *
     * @return bool|null
     */
    public function getAnneeNaissanceInconnue()
    {
        return $this->container['anneeNaissanceInconnue'];
    }

    /**
     * Sets anneeNaissanceInconnue
     *
     * @param bool|null $anneeNaissanceInconnue si le candidat ne connait ni sa date, ni son année de naissance, ce flag doit être à true
     *
     * @return self
     */
    public function setAnneeNaissanceInconnue($anneeNaissanceInconnue)
    {
        $this->container['anneeNaissanceInconnue'] = $anneeNaissanceInconnue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


