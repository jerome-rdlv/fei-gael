<?php
/**
 * CandidatInscription
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GAEL API
 *
 * Ceci est l'API des web services exposés par le système informatique GAEL (Gestion Administrative En Ligne) pour France Éducation international.  Cette API offre les services suivants   * inscrire un ou plusieurs candidats à un examen  * importer dans GAEL les résultats d'un ou plusieurs candidats à un même examen
 *
 * The version of the OpenAPI document: 1.8.1
 * Contact: gael-api@france-education-international.fr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fei\Gael\Model;

use \ArrayAccess;
use \Fei\Gael\ObjectSerializer;

/**
 * CandidatInscription Class Doc Comment
 *
 * @category Class
 * @description données d&#39;inscription d&#39;un candidat existant dans GAEL à un examen
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CandidatInscription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CandidatInscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'numero' => 'string',
        'nom' => 'string',
        'motif' => '\Fei\Gael\Model\MotifInscription',
        'reduction' => '\Fei\Gael\Model\CritereReduction',
        'origine' => 'string',
        'handicap' => 'bool',
        'amenagements' => '\Fei\Gael\Model\Amenagement[]',
        'dispenses' => '\Fei\Gael\Model\EpreuveType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'numero' => null,
        'nom' => null,
        'motif' => null,
        'reduction' => null,
        'origine' => null,
        'handicap' => null,
        'amenagements' => null,
        'dispenses' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numero' => 'numero',
        'nom' => 'nom',
        'motif' => 'motif',
        'reduction' => 'reduction',
        'origine' => 'origine',
        'handicap' => 'handicap',
        'amenagements' => 'amenagements',
        'dispenses' => 'dispenses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numero' => 'setNumero',
        'nom' => 'setNom',
        'motif' => 'setMotif',
        'reduction' => 'setReduction',
        'origine' => 'setOrigine',
        'handicap' => 'setHandicap',
        'amenagements' => 'setAmenagements',
        'dispenses' => 'setDispenses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numero' => 'getNumero',
        'nom' => 'getNom',
        'motif' => 'getMotif',
        'reduction' => 'getReduction',
        'origine' => 'getOrigine',
        'handicap' => 'getHandicap',
        'amenagements' => 'getAmenagements',
        'dispenses' => 'getDispenses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['numero'] = $data['numero'] ?? null;
        $this->container['nom'] = $data['nom'] ?? null;
        $this->container['motif'] = $data['motif'] ?? null;
        $this->container['reduction'] = $data['reduction'] ?? null;
        $this->container['origine'] = $data['origine'] ?? null;
        $this->container['handicap'] = $data['handicap'] ?? null;
        $this->container['amenagements'] = $data['amenagements'] ?? null;
        $this->container['dispenses'] = $data['dispenses'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['numero'] === null) {
            $invalidProperties[] = "'numero' can't be null";
        }
        if ($this->container['nom'] === null) {
            $invalidProperties[] = "'nom' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets numero
     *
     * @return string
     */
    public function getNumero()
    {
        return $this->container['numero'];
    }

    /**
     * Sets numero
     *
     * @param string $numero Numéro du candidat dans GAEL, unique.
     *
     * @return self
     */
    public function setNumero($numero)
    {
        $this->container['numero'] = $numero;

        return $this;
    }

    /**
     * Gets nom
     *
     * @return string
     */
    public function getNom()
    {
        return $this->container['nom'];
    }

    /**
     * Sets nom
     *
     * @param string $nom Nom du candidat. GAEL vérifie que le numéro de candidat et le nom fournit coïncident pour contrôler une mauvaise saisie
     *
     * @return self
     */
    public function setNom($nom)
    {
        $this->container['nom'] = $nom;

        return $this;
    }

    /**
     * Gets motif
     *
     * @return \Fei\Gael\Model\MotifInscription|null
     */
    public function getMotif()
    {
        return $this->container['motif'];
    }

    /**
     * Sets motif
     *
     * @param \Fei\Gael\Model\MotifInscription|null $motif motif
     *
     * @return self
     */
    public function setMotif($motif)
    {
        $this->container['motif'] = $motif;

        return $this;
    }

    /**
     * Gets reduction
     *
     * @return \Fei\Gael\Model\CritereReduction|null
     */
    public function getReduction()
    {
        return $this->container['reduction'];
    }

    /**
     * Sets reduction
     *
     * @param \Fei\Gael\Model\CritereReduction|null $reduction reduction
     *
     * @return self
     */
    public function setReduction($reduction)
    {
        $this->container['reduction'] = $reduction;

        return $this;
    }

    /**
     * Gets origine
     *
     * @return string|null
     */
    public function getOrigine()
    {
        return $this->container['origine'];
    }

    /**
     * Sets origine
     *
     * @param string|null $origine Code centre du centre d'origine / établissement affilié du candidat
     *
     * @return self
     */
    public function setOrigine($origine)
    {
        $this->container['origine'] = $origine;

        return $this;
    }

    /**
     * Gets handicap
     *
     * @return bool|null
     */
    public function getHandicap()
    {
        return $this->container['handicap'];
    }

    /**
     * Sets handicap
     *
     * @param bool|null $handicap True si le candidat a un handicap
     *
     * @return self
     */
    public function setHandicap($handicap)
    {
        $this->container['handicap'] = $handicap;

        return $this;
    }

    /**
     * Gets amenagements
     *
     * @return \Fei\Gael\Model\Amenagement[]|null
     */
    public function getAmenagements()
    {
        return $this->container['amenagements'];
    }

    /**
     * Sets amenagements
     *
     * @param \Fei\Gael\Model\Amenagement[]|null $amenagements amenagements
     *
     * @return self
     */
    public function setAmenagements($amenagements)
    {
        $this->container['amenagements'] = $amenagements;

        return $this;
    }

    /**
     * Gets dispenses
     *
     * @return \Fei\Gael\Model\EpreuveType[]|null
     */
    public function getDispenses()
    {
        return $this->container['dispenses'];
    }

    /**
     * Sets dispenses
     *
     * @param \Fei\Gael\Model\EpreuveType[]|null $dispenses Si le candidat est dispensé de passer certains types d'épreuves, ces dernières sont listées ici. On ne peut pas être dispensé de toutes les épreuves. Par exemple, une personne malentendante peut être dispensée de la compréhension de l'oral.
     *
     * @return self
     */
    public function setDispenses($dispenses)
    {
        $this->container['dispenses'] = $dispenses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


