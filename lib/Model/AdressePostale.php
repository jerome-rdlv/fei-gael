<?php
/**
 * AdressePostale
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GAEL API
 *
 * Ceci est l'API des web services exposés par le système informatique GAEL (Gestion Administrative En Ligne) pour France Éducation international.  Cette API offre les services suivants   * inscrire un ou plusieurs candidats à un examen  * importer dans GAEL les résultats d'un ou plusieurs candidats à un même examen
 *
 * The version of the OpenAPI document: 1.8.1
 * Contact: gael-api@france-education-international.fr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fei\Gael\Model;

use \ArrayAccess;
use \Fei\Gael\ObjectSerializer;

/**
 * AdressePostale Class Doc Comment
 *
 * @category Class
 * @description Une adresse postale dans GAEL, à l&#39;étranger ou en France
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class AdressePostale implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdressePostale';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adressePostal' => 'string',
        'codePostal' => 'string',
        'ville' => 'string',
        'localite' => 'string',
        'state' => 'string',
        'pays' => '\Fei\Gael\Model\Pays'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adressePostal' => null,
        'codePostal' => null,
        'ville' => null,
        'localite' => null,
        'state' => null,
        'pays' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adressePostal' => 'adressePostal',
        'codePostal' => 'codePostal',
        'ville' => 'ville',
        'localite' => 'localite',
        'state' => 'state',
        'pays' => 'pays'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adressePostal' => 'setAdressePostal',
        'codePostal' => 'setCodePostal',
        'ville' => 'setVille',
        'localite' => 'setLocalite',
        'state' => 'setState',
        'pays' => 'setPays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adressePostal' => 'getAdressePostal',
        'codePostal' => 'getCodePostal',
        'ville' => 'getVille',
        'localite' => 'getLocalite',
        'state' => 'getState',
        'pays' => 'getPays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adressePostal'] = $data['adressePostal'] ?? null;
        $this->container['codePostal'] = $data['codePostal'] ?? null;
        $this->container['ville'] = $data['ville'] ?? null;
        $this->container['localite'] = $data['localite'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['pays'] = $data['pays'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adressePostal
     *
     * @return string|null
     */
    public function getAdressePostal()
    {
        return $this->container['adressePostal'];
    }

    /**
     * Sets adressePostal
     *
     * @param string|null $adressePostal Les lignes de l'adresse postale
     *
     * @return self
     */
    public function setAdressePostal($adressePostal)
    {
        $this->container['adressePostal'] = $adressePostal;

        return $this;
    }

    /**
     * Gets codePostal
     *
     * @return string|null
     */
    public function getCodePostal()
    {
        return $this->container['codePostal'];
    }

    /**
     * Sets codePostal
     *
     * @param string|null $codePostal Code postal (certains pays fonctionnent sans)
     *
     * @return self
     */
    public function setCodePostal($codePostal)
    {
        $this->container['codePostal'] = $codePostal;

        return $this;
    }

    /**
     * Gets ville
     *
     * @return string|null
     */
    public function getVille()
    {
        return $this->container['ville'];
    }

    /**
     * Sets ville
     *
     * @param string|null $ville Ville
     *
     * @return self
     */
    public function setVille($ville)
    {
        $this->container['ville'] = $ville;

        return $this;
    }

    /**
     * Gets localite
     *
     * @return string|null
     */
    public function getLocalite()
    {
        return $this->container['localite'];
    }

    /**
     * Sets localite
     *
     * @param string|null $localite Le découpage géographique sous la ville
     *
     * @return self
     */
    public function setLocalite($localite)
    {
        $this->container['localite'] = $localite;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Le découpage géographique sous le pays, particulièrement pour les pays fédéraux
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets pays
     *
     * @return \Fei\Gael\Model\Pays|null
     */
    public function getPays()
    {
        return $this->container['pays'];
    }

    /**
     * Sets pays
     *
     * @param \Fei\Gael\Model\Pays|null $pays pays
     *
     * @return self
     */
    public function setPays($pays)
    {
        $this->container['pays'] = $pays;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


