<?php
/**
 * ExamenApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GAEL API
 *
 * Ceci est l'API des web services exposés par le système informatique GAEL (Gestion Administrative En Ligne) pour France Éducation international.  Cette API offre les services suivants   * inscrire un ou plusieurs candidats à un examen  * importer dans GAEL les résultats d'un ou plusieurs candidats à un même examen
 *
 * The version of the OpenAPI document: 1.8.1
 * Contact: gael-api@france-education-international.fr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fei\Gael\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Fei\Gael\ApiException;
use Fei\Gael\Configuration;
use Fei\Gael\HeaderSelector;
use Fei\Gael\ObjectSerializer;

/**
 * ExamenApi Class Doc Comment
 *
 * @category Class
 * @package  Fei\Gael
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExamenApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addCandidatsToExamen
     *
     * Inscrit un ou plusieurs candidats à un même examen dans GAEL
     *
     * @param  \Fei\Gael\Model\Inscriptions $inscriptions Identifiant de l&#39;examen et liste des candidats et des informations d&#39;inscription. (required)
     *
     * @throws \Fei\Gael\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Fei\Gael\Model\ResponseBase|\Fei\Gael\Model\ResponseBase
     */
    public function addCandidatsToExamen($inscriptions)
    {
        list($response) = $this->addCandidatsToExamenWithHttpInfo($inscriptions);
        return $response;
    }

    /**
     * Operation addCandidatsToExamenWithHttpInfo
     *
     * Inscrit un ou plusieurs candidats à un même examen dans GAEL
     *
     * @param  \Fei\Gael\Model\Inscriptions $inscriptions Identifiant de l&#39;examen et liste des candidats et des informations d&#39;inscription. (required)
     *
     * @throws \Fei\Gael\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Fei\Gael\Model\ResponseBase|\Fei\Gael\Model\ResponseBase, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCandidatsToExamenWithHttpInfo($inscriptions)
    {
        $request = $this->addCandidatsToExamenRequest($inscriptions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Fei\Gael\Model\ResponseBase' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fei\Gael\Model\ResponseBase', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Fei\Gael\Model\ResponseBase' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fei\Gael\Model\ResponseBase', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Fei\Gael\Model\ResponseBase';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fei\Gael\Model\ResponseBase',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fei\Gael\Model\ResponseBase',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCandidatsToExamenAsync
     *
     * Inscrit un ou plusieurs candidats à un même examen dans GAEL
     *
     * @param  \Fei\Gael\Model\Inscriptions $inscriptions Identifiant de l&#39;examen et liste des candidats et des informations d&#39;inscription. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCandidatsToExamenAsync($inscriptions)
    {
        return $this->addCandidatsToExamenAsyncWithHttpInfo($inscriptions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCandidatsToExamenAsyncWithHttpInfo
     *
     * Inscrit un ou plusieurs candidats à un même examen dans GAEL
     *
     * @param  \Fei\Gael\Model\Inscriptions $inscriptions Identifiant de l&#39;examen et liste des candidats et des informations d&#39;inscription. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCandidatsToExamenAsyncWithHttpInfo($inscriptions)
    {
        $returnType = '\Fei\Gael\Model\ResponseBase';
        $request = $this->addCandidatsToExamenRequest($inscriptions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCandidatsToExamen'
     *
     * @param  \Fei\Gael\Model\Inscriptions $inscriptions Identifiant de l&#39;examen et liste des candidats et des informations d&#39;inscription. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCandidatsToExamenRequest($inscriptions)
    {
        // verify the required parameter 'inscriptions' is set
        if ($inscriptions === null || (is_array($inscriptions) && count($inscriptions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inscriptions when calling addCandidatsToExamen'
            );
        }

        $resourcePath = '/examen/inscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inscriptions)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inscriptions));
            } else {
                $httpBody = $inscriptions;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addNewCandidats
     *
     * Ajouter dans GAEL des candidats qui passent le DELF-DALF pour la première fois.
     *
     * @param  \Fei\Gael\Model\InlineObject $inlineObject inlineObject (required)
     *
     * @throws \Fei\Gael\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Fei\Gael\Model\CandidatCree[]|\Fei\Gael\Model\ResponseBase
     */
    public function addNewCandidats($inlineObject)
    {
        list($response) = $this->addNewCandidatsWithHttpInfo($inlineObject);
        return $response;
    }

    /**
     * Operation addNewCandidatsWithHttpInfo
     *
     * Ajouter dans GAEL des candidats qui passent le DELF-DALF pour la première fois.
     *
     * @param  \Fei\Gael\Model\InlineObject $inlineObject (required)
     *
     * @throws \Fei\Gael\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Fei\Gael\Model\CandidatCree[]|\Fei\Gael\Model\ResponseBase, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewCandidatsWithHttpInfo($inlineObject)
    {
        $request = $this->addNewCandidatsRequest($inlineObject);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Fei\Gael\Model\CandidatCree[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fei\Gael\Model\CandidatCree[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Fei\Gael\Model\ResponseBase' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fei\Gael\Model\ResponseBase', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Fei\Gael\Model\CandidatCree[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fei\Gael\Model\CandidatCree[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fei\Gael\Model\ResponseBase',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addNewCandidatsAsync
     *
     * Ajouter dans GAEL des candidats qui passent le DELF-DALF pour la première fois.
     *
     * @param  \Fei\Gael\Model\InlineObject $inlineObject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCandidatsAsync($inlineObject)
    {
        return $this->addNewCandidatsAsyncWithHttpInfo($inlineObject)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewCandidatsAsyncWithHttpInfo
     *
     * Ajouter dans GAEL des candidats qui passent le DELF-DALF pour la première fois.
     *
     * @param  \Fei\Gael\Model\InlineObject $inlineObject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCandidatsAsyncWithHttpInfo($inlineObject)
    {
        $returnType = '\Fei\Gael\Model\CandidatCree[]';
        $request = $this->addNewCandidatsRequest($inlineObject);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNewCandidats'
     *
     * @param  \Fei\Gael\Model\InlineObject $inlineObject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewCandidatsRequest($inlineObject)
    {
        // verify the required parameter 'inlineObject' is set
        if ($inlineObject === null || (is_array($inlineObject) && count($inlineObject) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inlineObject when calling addNewCandidats'
            );
        }

        $resourcePath = '/examen/addCandidats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inlineObject)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inlineObject));
            } else {
                $httpBody = $inlineObject;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCandidatsFromExamen
     *
     * Récupère les candidats inscrits à un examen pour un centre.
     *
     * @param  string $codeSession Le code session pour laquelle on veut récupérer la liste des candidats (required)
     * @param  string $codeCentre Le numéro du centre dans GAEL tel qu&#39;affiché sur l&#39;onglet &#39;Statut du centre&#39; (required)
     * @param  \Fei\Gael\Model\NiveauExamen $niveau niveau (required)
     *
     * @throws \Fei\Gael\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Fei\Gael\Model\CandidatSimple[]|\Fei\Gael\Model\ResponseBase
     */
    public function getCandidatsFromExamen($codeSession, $codeCentre, $niveau)
    {
        list($response) = $this->getCandidatsFromExamenWithHttpInfo($codeSession, $codeCentre, $niveau);
        return $response;
    }

    /**
     * Operation getCandidatsFromExamenWithHttpInfo
     *
     * Récupère les candidats inscrits à un examen pour un centre.
     *
     * @param  string $codeSession Le code session pour laquelle on veut récupérer la liste des candidats (required)
     * @param  string $codeCentre Le numéro du centre dans GAEL tel qu&#39;affiché sur l&#39;onglet &#39;Statut du centre&#39; (required)
     * @param  \Fei\Gael\Model\NiveauExamen $niveau (required)
     *
     * @throws \Fei\Gael\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Fei\Gael\Model\CandidatSimple[]|\Fei\Gael\Model\ResponseBase, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCandidatsFromExamenWithHttpInfo($codeSession, $codeCentre, $niveau)
    {
        $request = $this->getCandidatsFromExamenRequest($codeSession, $codeCentre, $niveau);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Fei\Gael\Model\CandidatSimple[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fei\Gael\Model\CandidatSimple[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Fei\Gael\Model\ResponseBase' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fei\Gael\Model\ResponseBase', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Fei\Gael\Model\CandidatSimple[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fei\Gael\Model\CandidatSimple[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fei\Gael\Model\ResponseBase',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCandidatsFromExamenAsync
     *
     * Récupère les candidats inscrits à un examen pour un centre.
     *
     * @param  string $codeSession Le code session pour laquelle on veut récupérer la liste des candidats (required)
     * @param  string $codeCentre Le numéro du centre dans GAEL tel qu&#39;affiché sur l&#39;onglet &#39;Statut du centre&#39; (required)
     * @param  \Fei\Gael\Model\NiveauExamen $niveau (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCandidatsFromExamenAsync($codeSession, $codeCentre, $niveau)
    {
        return $this->getCandidatsFromExamenAsyncWithHttpInfo($codeSession, $codeCentre, $niveau)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCandidatsFromExamenAsyncWithHttpInfo
     *
     * Récupère les candidats inscrits à un examen pour un centre.
     *
     * @param  string $codeSession Le code session pour laquelle on veut récupérer la liste des candidats (required)
     * @param  string $codeCentre Le numéro du centre dans GAEL tel qu&#39;affiché sur l&#39;onglet &#39;Statut du centre&#39; (required)
     * @param  \Fei\Gael\Model\NiveauExamen $niveau (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCandidatsFromExamenAsyncWithHttpInfo($codeSession, $codeCentre, $niveau)
    {
        $returnType = '\Fei\Gael\Model\CandidatSimple[]';
        $request = $this->getCandidatsFromExamenRequest($codeSession, $codeCentre, $niveau);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCandidatsFromExamen'
     *
     * @param  string $codeSession Le code session pour laquelle on veut récupérer la liste des candidats (required)
     * @param  string $codeCentre Le numéro du centre dans GAEL tel qu&#39;affiché sur l&#39;onglet &#39;Statut du centre&#39; (required)
     * @param  \Fei\Gael\Model\NiveauExamen $niveau (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCandidatsFromExamenRequest($codeSession, $codeCentre, $niveau)
    {
        // verify the required parameter 'codeSession' is set
        if ($codeSession === null || (is_array($codeSession) && count($codeSession) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $codeSession when calling getCandidatsFromExamen'
            );
        }
        // verify the required parameter 'codeCentre' is set
        if ($codeCentre === null || (is_array($codeCentre) && count($codeCentre) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $codeCentre when calling getCandidatsFromExamen'
            );
        }
        // verify the required parameter 'niveau' is set
        if ($niveau === null || (is_array($niveau) && count($niveau) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $niveau when calling getCandidatsFromExamen'
            );
        }

        $resourcePath = '/examen/candidats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($codeSession !== null) {
            if('form' === 'form' && is_array($codeSession)) {
                foreach($codeSession as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['codeSession'] = $codeSession;
            }
        }
        // query params
        if ($codeCentre !== null) {
            if('form' === 'form' && is_array($codeCentre)) {
                foreach($codeCentre as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['codeCentre'] = $codeCentre;
            }
        }
        // query params
        if ($niveau !== null) {
            if('form' === 'form' && is_array($niveau)) {
                foreach($niveau as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['niveau'] = $niveau;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadCandidatsResults
     *
     * Téléverser les résultats (notes et absences) des candidats dans GAEL
     *
     * @param  \Fei\Gael\Model\UploadedResults $uploadedResults Le corp de la requête contient les éléments nécessaires pour identifier l&#39;examen et le centre, ainsi que la liste des résultats des candidats pour cet examen. On y met chaque note, ainsi que les absences et dispenses éventuelles. * l&#39;examen doit exister dans GAEL * le centre doit être positionner sur cet examen * les candidats doivent avoir été inscrits à cet examen (required)
     *
     * @throws \Fei\Gael\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Fei\Gael\Model\ResponseBase|\Fei\Gael\Model\ResponseBase
     */
    public function uploadCandidatsResults($uploadedResults)
    {
        list($response) = $this->uploadCandidatsResultsWithHttpInfo($uploadedResults);
        return $response;
    }

    /**
     * Operation uploadCandidatsResultsWithHttpInfo
     *
     * Téléverser les résultats (notes et absences) des candidats dans GAEL
     *
     * @param  \Fei\Gael\Model\UploadedResults $uploadedResults Le corp de la requête contient les éléments nécessaires pour identifier l&#39;examen et le centre, ainsi que la liste des résultats des candidats pour cet examen. On y met chaque note, ainsi que les absences et dispenses éventuelles. * l&#39;examen doit exister dans GAEL * le centre doit être positionner sur cet examen * les candidats doivent avoir été inscrits à cet examen (required)
     *
     * @throws \Fei\Gael\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Fei\Gael\Model\ResponseBase|\Fei\Gael\Model\ResponseBase, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadCandidatsResultsWithHttpInfo($uploadedResults)
    {
        $request = $this->uploadCandidatsResultsRequest($uploadedResults);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Fei\Gael\Model\ResponseBase' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fei\Gael\Model\ResponseBase', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Fei\Gael\Model\ResponseBase' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fei\Gael\Model\ResponseBase', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Fei\Gael\Model\ResponseBase';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fei\Gael\Model\ResponseBase',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fei\Gael\Model\ResponseBase',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadCandidatsResultsAsync
     *
     * Téléverser les résultats (notes et absences) des candidats dans GAEL
     *
     * @param  \Fei\Gael\Model\UploadedResults $uploadedResults Le corp de la requête contient les éléments nécessaires pour identifier l&#39;examen et le centre, ainsi que la liste des résultats des candidats pour cet examen. On y met chaque note, ainsi que les absences et dispenses éventuelles. * l&#39;examen doit exister dans GAEL * le centre doit être positionner sur cet examen * les candidats doivent avoir été inscrits à cet examen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadCandidatsResultsAsync($uploadedResults)
    {
        return $this->uploadCandidatsResultsAsyncWithHttpInfo($uploadedResults)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadCandidatsResultsAsyncWithHttpInfo
     *
     * Téléverser les résultats (notes et absences) des candidats dans GAEL
     *
     * @param  \Fei\Gael\Model\UploadedResults $uploadedResults Le corp de la requête contient les éléments nécessaires pour identifier l&#39;examen et le centre, ainsi que la liste des résultats des candidats pour cet examen. On y met chaque note, ainsi que les absences et dispenses éventuelles. * l&#39;examen doit exister dans GAEL * le centre doit être positionner sur cet examen * les candidats doivent avoir été inscrits à cet examen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadCandidatsResultsAsyncWithHttpInfo($uploadedResults)
    {
        $returnType = '\Fei\Gael\Model\ResponseBase';
        $request = $this->uploadCandidatsResultsRequest($uploadedResults);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadCandidatsResults'
     *
     * @param  \Fei\Gael\Model\UploadedResults $uploadedResults Le corp de la requête contient les éléments nécessaires pour identifier l&#39;examen et le centre, ainsi que la liste des résultats des candidats pour cet examen. On y met chaque note, ainsi que les absences et dispenses éventuelles. * l&#39;examen doit exister dans GAEL * le centre doit être positionner sur cet examen * les candidats doivent avoir été inscrits à cet examen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadCandidatsResultsRequest($uploadedResults)
    {
        // verify the required parameter 'uploadedResults' is set
        if ($uploadedResults === null || (is_array($uploadedResults) && count($uploadedResults) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uploadedResults when calling uploadCandidatsResults'
            );
        }

        $resourcePath = '/examen/resultat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($uploadedResults)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($uploadedResults));
            } else {
                $httpBody = $uploadedResults;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
